import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

// Provider para gestionar autenticaci√≥n y perfil del usuario
class AuthProvider extends ChangeNotifier {
  final SupabaseClient supabase = Supabase.instance.client;

  Session? _session; // Sesi√≥n actual del usuario (token, etc.)
  User? _user; // Usuario autenticado (ID, email, etc.)
  Map<String, dynamic>? _userProfile; // Perfil adicional desde tabla 'usuarios'
  bool _isLoading = false; // Indicador de carga general

  // Getters p√∫blicos para acceder desde el exterior (por ejemplo, widgets)
  Session? get session => _session;
  User? get user => _user;
  Map<String, dynamic>? get userProfile => _userProfile;
  bool get isLoading => _isLoading;

  // Cargar sesi√≥n autom√°ticamente al iniciar la app
  Future<void> loadSession() async {
    _isLoading = true;
    notifyListeners(); // Notifica a los listeners que la app est√° cargando

    // Obtiene sesi√≥n y usuario actuales desde Supabase (si ya ha iniciado sesi√≥n)
    _session = supabase.auth.currentSession;
    _user = supabase.auth.currentUser;

    // Si hay usuario, asegurar que est√° en nuestra tabla y cargar su perfil
    if (_user != null) {
      await _asegurarUsuarioRegistrado();
      await _loadUserProfile();
    }

    _isLoading = false;
    notifyListeners(); // Notifica que ha terminado la carga
  }

  // Funci√≥n de inicio de sesi√≥n con email y contrase√±a
  // Funci√≥n de inicio de sesi√≥n con correo y contrase√±a
Future<bool> login(String email, String password) async {
  try {
    final response = await supabase.auth.signInWithPassword(
      email: email,
      password: password,
    );

    // Verificamos si la respuesta contiene una sesi√≥n v√°lida
    if (response.user != null) {
      _session = response.session;
      _user = response.user;
      await _asegurarUsuarioRegistrado();
      await _loadUserProfile();
      notifyListeners();
      print('Login con correo exitoso');
      return true;
    } else {
      print('No se pudo iniciar sesi√≥n con el correo. Respuesta vac√≠a.');
      return false;
    }
  } catch (e) {
    print('Error durante el inicio de sesi√≥n con correo: $e');
    return false;
  }
}

Future<bool> loginWithPhone(String phone, String password) async {
  try {
    // Buscar usuario en la tabla 'usuarios' por tel√©fono y contrase√±a
    final result = await supabase
        .from('usuarios')
        .select('email, id')
        .eq('telefono', phone) // Buscar por tel√©fono
        .eq('password', password) // Comparar la contrase√±a
        .maybeSingle();

    if (result != null) {
      final email = result['email'];
      print('Usuario encontrado por tel√©fono: $email');
      // Intentamos login con el correo del usuario
      return login(email, password);
    } else {
      print('No se encontr√≥ un usuario con ese tel√©fono y contrase√±a');
      return false;
    }
  } catch (e) {
    print('Error al intentar login con tel√©fono: $e');
    return false;
  }
}




  // Funci√≥n para registrar un nuevo usuario
  Future<bool> register(
    String email,
    String password,
    String nombre,
    String telefono, { // Agregamos el par√°metro de tel√©fono
    String foto = "", // Par√°metro opcional para la foto de perfil
  }) async {
    try {
      final response = await supabase.auth.signUp(
        email: email,
        password: password,
      );

      // Si el usuario fue creado correctamente
      if (response.user != null) {
        // Insertamos datos extra en la tabla 'usuarios' (incluyendo tel√©fono)
        await supabase.from('usuarios').insert({
          'id': response.user!.id,
          'email': email,
          'nombre': nombre,
          'telefono': telefono, // Insertamos el tel√©fono
          'foto_perfil': foto,
        });

        // Guardamos sesi√≥n y perfil
        _session = response.session;
        _user = response.user;
        await _loadUserProfile();
        notifyListeners();
        return true;
      }

      return false; // Registro fallido
    } on AuthException catch (_) {
      return false; // Error de Supabase (ej: correo duplicado)
    }
  }

  // Carga los datos del perfil del usuario desde la tabla 'usuarios'
  Future<void> _loadUserProfile() async {
    try {
      if (_user != null && _user!.email != null) {
        print('Cargando perfil para el usuario con email: ${_user!.email}');

        final result =
            await supabase
                .from('usuarios')
                .select()
                .eq('email', _user!.email!) // Busca por email
                .maybeSingle(); // Solo una fila (o null)

        if (result != null) {
          _userProfile = result;
          print('Perfil cargado: $_userProfile');
        } else {
          print('No se encontr√≥ el perfil del usuario en la tabla.');
        }
      } else {
        print('El usuario o su correo es nulo.');
      }
    } catch (e) {
      print('Error cargando perfil: $e');
    }
  }

  // Cerrar sesi√≥n y limpiar datos locales
  Future<void> logout() async {
    await supabase.auth.signOut(); // Termina la sesi√≥n
    _session = null;
    _user = null;
    _userProfile = null;
    notifyListeners(); // Notifica a widgets dependientes
  }

  // Verifica si el usuario est√° registrado en la tabla 'usuarios'
  Future<void> _asegurarUsuarioRegistrado() async {
    if (_user == null || _user!.email == null) return;

    try {
      // Busca si ya existe un perfil con ese email
      final existing =
          await supabase
              .from('usuarios')
              .select()
              .eq('email', _user!.email!)
              .maybeSingle();

      // Si no existe, lo crea autom√°ticamente
      if (existing == null) {
        await supabase.from('usuarios').insert({
          'id': _user!.id,
          'email': _user!.email,
          'nombre': 'Usuario nuevo',
          'foto_perfil': '',
          'telefono':
              '', // Aseguramos que el tel√©fono tambi√©n se registre vac√≠o si no existe
        });
        print('‚úÖ Usuario creado autom√°ticamente en tabla usuarios');
      } else {
        print('üü¢ Usuario ya existe en tabla usuarios (por email)');
      }
    } catch (e) {
      print('‚ùå Error asegurando usuario registrado: $e');
    }
  }
}
